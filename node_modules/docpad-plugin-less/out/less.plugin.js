// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var LessPlugin;
    return LessPlugin = (function(_super) {

      __extends(LessPlugin, _super);

      function LessPlugin() {
        return LessPlugin.__super__.constructor.apply(this, arguments);
      }

      LessPlugin.prototype.name = 'less';

      LessPlugin.prototype.config = {
        compress: true,
        environments: {
          development: {
            compress: false
          }
        }
      };

      LessPlugin.prototype.render = function(opts, next) {
        var dirPath, file, inExtension, less, options, outExtension, path, srcPath, templateData;
        inExtension = opts.inExtension, outExtension = opts.outExtension, templateData = opts.templateData, file = opts.file;
        if (inExtension === 'less' && (outExtension === 'css' || outExtension === null)) {
          path = require('path');
          less = require('less');
          srcPath = file.get('fullPath');
          dirPath = path.dirname(srcPath);
          options = {
            paths: [dirPath],
            compress: this.config.compress
          };
          return new less.Parser(options).parse(opts.content, function(err, tree) {
            if (err) {
              return next(err);
            }
            opts.content = tree.toCSS({
              compress: options.compress
            });
            return next();
          });
        } else {
          return next();
        }
      };

      return LessPlugin;

    })(BasePlugin);
  };

}).call(this);
